from pgvector.sqlalchemy import Vector
import uuid

from app.extensions import db

class Product(db.Model):
    __tablename__ = "products"

    id = db.Column(db.String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
    name = db.Column(db.String(255), nullable=False, index=True, unique=True)
    description = db.Column(db.Text, nullable=True)
    price = db.Column(db.Numeric(10, 2), nullable=False)

    # Relationship to images (one-to-many)
    images = db.relationship("ProductImage", backref="product", lazy=True, cascade="all, delete-orphan")

    def __repr__(self):
        return f"<Product {self.name} (${self.price})>"
    
class ProductImage(db.Model):
    __tablename__ = "product_images"

    id = db.Column(db.String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
    product_id = db.Column(db.String(36), db.ForeignKey("products.id", ondelete="CASCADE"), nullable=False)
    image_url = db.Column(db.String(500), nullable=False)

    # Caption generated by AI
    caption = db.Column(db.Text, nullable=True)

    # Embedding vector
    # The length of the embedding vector will be 1536 for OpenAI's text-embedding-3-small model
    embedding = db.Column(Vector(1536), nullable=True)

    def __repr__(self):
        return f"<ProductImage {self.image_url}>"